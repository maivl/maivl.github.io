{"version":3,"sources":["webpack:///./node_modules/wasm-aeslib/index.js","webpack:///./node_modules/wasm-aeslib/index_bg.js","webpack:///(webpack)/buildin/harmony-module.js"],"names":["lTextDecoder","TextDecoder","module","require","cachedTextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","Uint8Array","getStringFromWasm0","ptr","len","subarray","_assertNum","n","Error","cachegetInt32Memory0","getInt32Memory0","Int32Array","WASM_VECTOR_LEN","lTextEncoder","TextEncoder","cachedTextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","undefined","mem","offset","code","charCodeAt","slice","ret","passArray8ToWasm0","getArrayU8FromWasm0","AesResult","this","retptr","r0","r1","Aeslib","obj","Object","create","prototype","key","iv","ptr0","len0","ptr1","len1","__wrap","u8arr","_str","v1","__wbindgen_throw","arg0","arg1","exports","originalModule","webpackPolyfill","children","defineProperty","enumerable","get","l","i"],"mappings":"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","file":"js/chunk-cb77a28e.ed5cd4ad.js","sourcesContent":["import * as wasm from \"./index_bg.wasm\";\nexport * from \"./index_bg.js\";","import * as wasm from './index_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction _assertNum(n) {\n    if (typeof(n) !== 'number') throw new Error('expected a number argument');\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (typeof(arg) !== 'string') throw new Error('expected a string argument');\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n        if (ret.read !== arg.length) throw new Error('failed to pass whole string');\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n*/\nexport class AesResult {\n\n    constructor() {\n        throw new Error('cannot invoke `new` directly');\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_aesresult_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    to_string() {\n        try {\n            if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertNum(this.ptr);\n            wasm.aesresult_to_string(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nexport class Aeslib {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Aeslib.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_aeslib_free(ptr);\n    }\n    /**\n    * @param {string} key\n    * @param {string} iv\n    */\n    constructor(key, iv) {\n        var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passStringToWasm0(iv, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ret = wasm.aeslib_new(ptr0, len0, ptr1, len1);\n        return Aeslib.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} u8arr\n    * @returns {string}\n    */\n    base64encode(u8arr) {\n        try {\n            if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertNum(this.ptr);\n            var ptr0 = passArray8ToWasm0(u8arr, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.aeslib_base64encode(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} _str\n    * @returns {string}\n    */\n    base64decode(_str) {\n        try {\n            if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertNum(this.ptr);\n            var ptr0 = passStringToWasm0(_str, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.aeslib_base64decode(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {Uint8Array} u8arr\n    * @returns {Uint8Array}\n    */\n    fileencode(u8arr) {\n        try {\n            if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertNum(this.ptr);\n            var ptr0 = passArray8ToWasm0(u8arr, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.aeslib_fileencode(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} u8arr\n    * @returns {Uint8Array}\n    */\n    filedecode(u8arr) {\n        try {\n            if (this.ptr == 0) throw new Error('Attempt to use a moved value');\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            _assertNum(this.ptr);\n            var ptr0 = passArray8ToWasm0(u8arr, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.aeslib_filedecode(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}